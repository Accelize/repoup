---
name: tests

on:
  push:
    paths-ignore:
      - "**.md"
      - "LICENSE"
      - ".gitignore"
      - ".pre-commit-config.yaml"
      - "**.Dockerfile"

env:
  CACHE_DIR: /tmp/.workflow_cache
  POETRY_CACHE_DIR: /tmp/.workflow_cache/.pip_packages
  POETRY_VIRTUALENVS_PATH: /tmp/.workflow_cache/.venvs
  POETRY_HOME: /tmp/.workflow_cache/.poetry
  PIP_CACHE_DIR: /tmp/.workflow_cache/.pip_packages
  MYPY_CACHE_DIR: /tmp/.workflow_cache/.mypy

jobs:
  tests:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: ["ubuntu-latest"]
        python-version: ["3.9"]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache dependencies
        uses: actions/cache@v3
        id: cache
        with:
          path: ${{ env.CACHE_DIR }}
          key: tests-${{ matrix.os }}-${{ matrix.python-version }}--${{ hashFiles('**/poetry.lock') }}

      - name: Install System dependencies
        run: |
          sudo apt-get -qq update
          sudo apt-get -qq install debsigs

      - name: Install Python dependencies
        run: |
          sudo apt-get -qq install cmake ninja-build libbz2-dev libmagic-dev libglib2.0-dev libcurl4-openssl-dev libxml2-dev librpm-dev libssl-dev zlib1g-dev libzstd-dev liblzma-dev
          curl -sSL https://install.python-poetry.org | python -
          $POETRY_HOME/bin/poetry install -n -E "rpm deb aws speedups"
          mkdir -p $MYPY_CACHE_DIR
        env:
          # "createrepo_c" Build options
          CMAKE_ARGS: "-DWITH_ZCHUNK=OFF -DWITH_LIBMODULEMD=OFF"
        if: steps.cache.outputs.cache-hit != 'true'

      - name: Python code style
        run: $POETRY_HOME/bin/poetry run black . --check --diff
        if: ${{ always() }}

      - name: Python code quality
        run: $POETRY_HOME/bin/poetry run flake8 --docstring-convention google
        if: ${{ always() }}

      - name: Python code typing
        run: $POETRY_HOME/bin/poetry run mypy --strict --install-types --non-interactive .
        if: ${{ always() }}

      - name: Python code complexity
        run: $POETRY_HOME/bin/poetry run radon cc -n C repoup 1>&2
        if: ${{ always() }}

      - name: Python code maintainability
        run: $POETRY_HOME/bin/poetry run radon mi -n B repoup 1>&2
        if: ${{ always() }}

      - name: Python code security
        run: $POETRY_HOME/bin/poetry run bandit repoup -rs B404,B603
        if: ${{ always() }}

      - name: YAML code style
        run: $POETRY_HOME/bin/poetry run yamllint -s .
        if: ${{ always() }}

      - name: Test
        run: $POETRY_HOME/bin/poetry run pytest --junitxml=test-results.xml --cov-report xml
        if: ${{ always() }}
        env:
          AWS_ACCESS_KEY_ID: FAKEACCESSKEYID
          AWS_SECRET_ACCESS_KEY: FAKESECRETACCESSKEY
          AWS_DEFAULT_REGION: eu-west-1
          RPM_GPG_REQUIRE_SUDO: true

      - name: Collect coverage report
        uses: codecov/codecov-action@v3
        if: ${{ always() }}

  publish:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: ["ubuntu-latest"]
        python-version: ["3.9"]
    if: ${{ github.repository == 'Accelize/repoup' && github.ref_type == 'tag' }}
    needs: [tests]
    environment: PyPI
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache dependencies
        uses: actions/cache@v3
        id: cache
        with:
          path: ${{ env.CACHE_DIR }}
          key: tests-${{ matrix.os }}-${{ matrix.python-version }}--${{ hashFiles('**/poetry.lock') }}

      - name: Build packages
        run: $POETRY_HOME/bin/poetry version $(echo -e "${{ github.ref_name }}" | tr -d 'v')

      - name: Publish packages on PyPI
        run: $POETRY_HOME/bin/poetry publish --build
        env:
          POETRY_PYPI_TOKEN_PYPI: ${{ secrets.PYPI_TOKEN }}

      - name: Publish release on GitHub
        run: |
          go install github.com/tcnksm/ghr@latest
          ~/go/bin/ghr -generatenotes $PRERELEASE -c ${{ github.sha }} ${{ github.ref_name }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PRERELEASE: ${{ contains(github.ref_name, '-') && '-prerelease' || '' }}